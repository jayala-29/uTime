[{"type":"js","data":"/* Imports for global scope */\n\nMongo = Package.mongo.Mongo;\nReactiveVar = Package['reactive-var'].ReactiveVar;\n$ = Package.jquery.$;\njQuery = Package.jquery.jQuery;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nReactiveDict = Package['reactive-dict'].ReactiveDict;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\n_ = Package.underscore._;\nDDP = Package['ddp-client'].DDP;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nSpacebars = Package.spacebars.Spacebars;\nTemplate = Package.templating.Template;\nmeteorInstall = Package.modules.meteorInstall;\nBuffer = Package.modules.Buffer;\nprocess = Package.modules.process;\nSymbol = Package['ecmascript-runtime'].Symbol;\nMap = Package['ecmascript-runtime'].Map;\nSet = Package['ecmascript-runtime'].Set;\nmeteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nPromise = Package.promise.Promise;\nAccounts = Package['accounts-base'].Accounts;\nAutoupdate = Package.autoupdate.Autoupdate;\nReload = Package.reload.Reload;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/packages/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"imports\":{\"ui\":{\"body.html\":[\"./template.body.js\",function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// imports/ui/body.html                                                                                         //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nmodule.exports = require(\"./template.body.js\");                                                                 // 1\n                                                                                                                // 2\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"template.body.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// imports/ui/template.body.js                                                                                  //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\n                                                                                                                // 1\nTemplate.body.addContent((function() {                                                                          // 2\n  var view = this;                                                                                              // 3\n  return HTML.DIV({                                                                                             // 4\n    \"class\": \"container\"                                                                                        // 5\n  }, \"\\n    \", HTML.HEADER(\"\\n      \", HTML.H1(\"Todo List (\", Blaze.View(\"lookup:incompleteCount\", function() {\n    return Spacebars.mustache(view.lookup(\"incompleteCount\"));                                                  // 7\n  }), \")\"), \"\\n      \\n      \", HTML.Raw('<label class=\"hide-completed\">\\n        <input type=\"checkbox\">\\n        Hide Completed Tasks\\n      </label>'), \"\\n      \\n      \", Spacebars.include(view.lookupTemplate(\"loginButtons\")), \"\\n      \\n      \", Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"currentUser\"));                                                          // 9\n  }, function() {                                                                                               // 10\n    return [ \"\\n        \", HTML.FORM({                                                                          // 11\n      \"class\": \"new-task\"                                                                                       // 12\n    }, \"\\n          \", HTML.INPUT({                                                                             // 13\n      type: \"text\",                                                                                             // 14\n      name: \"text\",                                                                                             // 15\n      placeholder: \"Type to add new tasks\"                                                                      // 16\n    }), \"\\n        \"), \"\\n      \" ];                                                                            // 17\n  }), \"\\n    \"), \"\\n \\n    \", HTML.UL(\"\\n      \", Blaze.Each(function() {                                       // 18\n    return Spacebars.call(view.lookup(\"tasks\"));                                                                // 19\n  }, function() {                                                                                               // 20\n    return [ \"\\n        \", Spacebars.include(view.lookupTemplate(\"task\")), \"\\n      \" ];                        // 21\n  }), \"\\n    \"), \"\\n  \");                                                                                       // 22\n}));                                                                                                            // 23\nMeteor.startup(Template.body.renderToDocument);                                                                 // 24\n                                                                                                                // 25\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"task.html\":[\"./template.task.js\",function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// imports/ui/task.html                                                                                         //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nmodule.exports = require(\"./template.task.js\");                                                                 // 1\n                                                                                                                // 2\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"template.task.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// imports/ui/template.task.js                                                                                  //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\n                                                                                                                // 1\nTemplate.__checkName(\"task\");                                                                                   // 2\nTemplate[\"task\"] = new Template(\"Template.task\", (function() {                                                  // 3\n  var view = this;                                                                                              // 4\n  return HTML.LI({                                                                                              // 5\n    \"class\": function() {                                                                                       // 6\n      return [ Blaze.If(function() {                                                                            // 7\n        return Spacebars.call(view.lookup(\"checked\"));                                                          // 8\n      }, function() {                                                                                           // 9\n        return \"checked\";                                                                                       // 10\n      }), \" \", Blaze.If(function() {                                                                            // 11\n        return Spacebars.call(view.lookup(\"private\"));                                                          // 12\n      }, function() {                                                                                           // 13\n        return \"private\";                                                                                       // 14\n      }) ];                                                                                                     // 15\n    }                                                                                                           // 16\n  }, HTML.Raw('\\n    <button class=\"delete\">&times;</button>\\n \\n    '), HTML.INPUT({                           // 17\n    type: \"checkbox\",                                                                                           // 18\n    checked: function() {                                                                                       // 19\n      return Spacebars.mustache(view.lookup(\"checked\"));                                                        // 20\n    },                                                                                                          // 21\n    \"class\": \"toggle-checked\"                                                                                   // 22\n  }), \"\\n    \\n    \", Blaze.If(function() {                                                                     // 23\n    return Spacebars.call(view.lookup(\"isOwner\"));                                                              // 24\n  }, function() {                                                                                               // 25\n    return [ \"\\n      \", HTML.BUTTON({                                                                          // 26\n      \"class\": \"toggle-private\"                                                                                 // 27\n    }, \"\\n        \", Blaze.If(function() {                                                                      // 28\n      return Spacebars.call(view.lookup(\"private\"));                                                            // 29\n    }, function() {                                                                                             // 30\n      return \"\\n          Private\\n        \";                                                                   // 31\n    }, function() {                                                                                             // 32\n      return \"\\n          Public\\n        \";                                                                    // 33\n    }), \"\\n      \"), \"\\n    \" ];                                                                                // 34\n  }), \"\\n \\n    \", HTML.SPAN({                                                                                  // 35\n    \"class\": \"text\"                                                                                             // 36\n  }, HTML.STRONG(Blaze.View(\"lookup:username\", function() {                                                     // 37\n    return Spacebars.mustache(view.lookup(\"username\"));                                                         // 38\n  })), \" - \", Blaze.View(\"lookup:text\", function() {                                                            // 39\n    return Spacebars.mustache(view.lookup(\"text\"));                                                             // 40\n  })), \"\\n  \");                                                                                                 // 41\n}));                                                                                                            // 42\n                                                                                                                // 43\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"body.js\":[\"meteor/meteor\",\"meteor/templating\",\"meteor/reactive-dict\",\"../api/tasks.js\",\"./task.js\",\"./body.html\",function(require){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// imports/ui/body.js                                                                                           //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nvar _meteor = require('meteor/meteor');                                                                         // 1\n                                                                                                                //\nvar _templating = require('meteor/templating');                                                                 // 2\n                                                                                                                //\nvar _reactiveDict = require('meteor/reactive-dict');                                                            // 3\n                                                                                                                //\nvar _tasks = require('../api/tasks.js');                                                                        // 5\n                                                                                                                //\nrequire('./task.js');                                                                                           // 7\n                                                                                                                //\nrequire('./body.html');                                                                                         // 8\n                                                                                                                //\n_templating.Template.body.onCreated(function () {                                                               // 10\n  function bodyOnCreated() {                                                                                    // 10\n    this.state = new _reactiveDict.ReactiveDict();                                                              // 11\n    _meteor.Meteor.subscribe('tasks');                                                                          // 12\n  }                                                                                                             //\n                                                                                                                //\n  return bodyOnCreated;                                                                                         //\n}());                                                                                                           //\n                                                                                                                //\n_templating.Template.body.helpers({                                                                             // 15\n  tasks: function () {                                                                                          // 16\n    function tasks() {                                                                                          //\n      var instance = _templating.Template.instance();                                                           // 17\n      if (instance.state.get('hideCompleted')) {                                                                // 18\n        // If hide completed is checked, filter tasks                                                           //\n        return _tasks.Tasks.find({ checked: { $ne: true } }, { sort: { createdAt: -1 } });                      // 20\n      }                                                                                                         //\n      // Otherwise, return all of the tasks                                                                     //\n      return _tasks.Tasks.find({}, { sort: { createdAt: -1 } });                                                // 16\n    }                                                                                                           //\n                                                                                                                //\n    return tasks;                                                                                               //\n  }(),                                                                                                          //\n  incompleteCount: function () {                                                                                // 25\n    function incompleteCount() {                                                                                //\n      return _tasks.Tasks.find({ checked: { $ne: true } }).count();                                             // 26\n    }                                                                                                           //\n                                                                                                                //\n    return incompleteCount;                                                                                     //\n  }()                                                                                                           //\n});                                                                                                             //\n                                                                                                                //\n_templating.Template.body.events({                                                                              // 30\n  'submit .new-task': function () {                                                                             // 31\n    function submitNewTask(event) {                                                                             //\n      // Prevent default browser form submit                                                                    //\n      event.preventDefault();                                                                                   // 33\n                                                                                                                //\n      // Get value from form element                                                                            //\n      var target = event.target;                                                                                // 31\n      var text = target.text.value;                                                                             // 37\n                                                                                                                //\n      // Insert a task into the collection                                                                      //\n      _meteor.Meteor.call('tasks.insert', text);                                                                // 31\n                                                                                                                //\n      // Clear form                                                                                             //\n      target.text.value = '';                                                                                   // 31\n    }                                                                                                           //\n                                                                                                                //\n    return submitNewTask;                                                                                       //\n  }(),                                                                                                          //\n  'change .hide-completed input': function () {                                                                 // 45\n    function changeHideCompletedInput(event, instance) {                                                        //\n      instance.state.set('hideCompleted', event.target.checked);                                                // 46\n    }                                                                                                           //\n                                                                                                                //\n    return changeHideCompletedInput;                                                                            //\n  }()                                                                                                           //\n});                                                                                                             //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"task.js\":[\"meteor/meteor\",\"meteor/templating\",\"./task.html\",function(require){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// imports/ui/task.js                                                                                           //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nvar _meteor = require('meteor/meteor');                                                                         // 1\n                                                                                                                //\nvar _templating = require('meteor/templating');                                                                 // 2\n                                                                                                                //\nrequire('./task.html');                                                                                         // 4\n                                                                                                                //\n_templating.Template.task.helpers({                                                                             // 6\n  isOwner: function () {                                                                                        // 7\n    function isOwner() {                                                                                        //\n      return this.owner === _meteor.Meteor.userId();                                                            // 8\n    }                                                                                                           //\n                                                                                                                //\n    return isOwner;                                                                                             //\n  }()                                                                                                           //\n});                                                                                                             //\n                                                                                                                //\n_templating.Template.task.events({                                                                              // 12\n  'click .toggle-checked': function () {                                                                        // 13\n    function clickToggleChecked() {                                                                             //\n      // Set the checked property to the opposite of its current value                                          //\n      _meteor.Meteor.call('tasks.setChecked', this._id, !this.checked);                                         // 15\n    }                                                                                                           //\n                                                                                                                //\n    return clickToggleChecked;                                                                                  //\n  }(),                                                                                                          //\n  'click .delete': function () {                                                                                // 17\n    function clickDelete() {                                                                                    //\n      _meteor.Meteor.call('tasks.remove', this._id);                                                            // 18\n    }                                                                                                           //\n                                                                                                                //\n    return clickDelete;                                                                                         //\n  }(),                                                                                                          //\n  'click .toggle-private': function () {                                                                        // 20\n    function clickTogglePrivate() {                                                                             //\n      _meteor.Meteor.call('tasks.setPrivate', this._id, !this['private']);                                      // 21\n    }                                                                                                           //\n                                                                                                                //\n    return clickTogglePrivate;                                                                                  //\n  }()                                                                                                           //\n});                                                                                                             //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"api\":{\"tasks.js\":[\"meteor/meteor\",\"meteor/mongo\",\"meteor/check\",function(require,exports){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// imports/api/tasks.js                                                                                         //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nexports.__esModule = true;                                                                                      //\nexports.Tasks = undefined;                                                                                      //\n                                                                                                                //\nvar _meteor = require('meteor/meteor');                                                                         // 1\n                                                                                                                //\nvar _mongo = require('meteor/mongo');                                                                           // 2\n                                                                                                                //\nvar _check = require('meteor/check');                                                                           // 3\n                                                                                                                //\nvar Tasks = exports.Tasks = new _mongo.Mongo.Collection('tasks');                                               // 5\n                                                                                                                //\nif (_meteor.Meteor.isServer) {                                                                                  // 7\n  // This code only runs on the server                                                                          //\n  // Only publish tasks that are public or belong to the current user                                           //\n  _meteor.Meteor.publish('tasks', function () {                                                                 // 10\n    function tasksPublication() {                                                                               // 10\n      return Tasks.find({                                                                                       // 11\n        $or: [{ 'private': { $ne: true } }, { owner: this.userId }]                                             // 12\n      });                                                                                                       //\n    }                                                                                                           //\n                                                                                                                //\n    return tasksPublication;                                                                                    //\n  }());                                                                                                         //\n}                                                                                                               //\n                                                                                                                //\n_meteor.Meteor.methods({                                                                                        // 20\n  'tasks.insert': function () {                                                                                 // 21\n    function tasksInsert(text) {                                                                                //\n      (0, _check.check)(text, String);                                                                          // 22\n                                                                                                                //\n      // Make sure the user is logged in before inserting a task                                                //\n      if (!_meteor.Meteor.userId()) {                                                                           // 21\n        throw new _meteor.Meteor.Error('not-authorized');                                                       // 26\n      }                                                                                                         //\n                                                                                                                //\n      Tasks.insert({                                                                                            // 29\n        text: text,                                                                                             // 30\n        createdAt: new Date(),                                                                                  // 31\n        owner: _meteor.Meteor.userId(),                                                                         // 32\n        username: _meteor.Meteor.user().username                                                                // 33\n      });                                                                                                       //\n    }                                                                                                           //\n                                                                                                                //\n    return tasksInsert;                                                                                         //\n  }(),                                                                                                          //\n  'tasks.remove': function () {                                                                                 // 36\n    function tasksRemove(taskId) {                                                                              //\n      (0, _check.check)(taskId, String);                                                                        // 37\n                                                                                                                //\n      var task = Tasks.findOne(taskId);                                                                         // 39\n      if (task['private'] && task.owner !== _meteor.Meteor.userId()) {                                          // 40\n        // If the task is private, make sure only the owner can delete it                                       //\n        throw new _meteor.Meteor.Error('not-authorized');                                                       // 42\n      }                                                                                                         //\n                                                                                                                //\n      Tasks.remove(taskId);                                                                                     // 45\n    }                                                                                                           //\n                                                                                                                //\n    return tasksRemove;                                                                                         //\n  }(),                                                                                                          //\n  'tasks.setChecked': function () {                                                                             // 47\n    function tasksSetChecked(taskId, setChecked) {                                                              //\n      (0, _check.check)(taskId, String);                                                                        // 48\n      (0, _check.check)(setChecked, Boolean);                                                                   // 49\n                                                                                                                //\n      var task = Tasks.findOne(taskId);                                                                         // 51\n      if (task['private'] && task.owner !== _meteor.Meteor.userId()) {                                          // 52\n        // If the task is private, make sure only the owner can check it off                                    //\n        throw new _meteor.Meteor.Error('not-authorized');                                                       // 54\n      }                                                                                                         //\n                                                                                                                //\n      Tasks.update(taskId, { $set: { checked: setChecked } });                                                  // 57\n    }                                                                                                           //\n                                                                                                                //\n    return tasksSetChecked;                                                                                     //\n  }(),                                                                                                          //\n  'tasks.setPrivate': function () {                                                                             // 59\n    function tasksSetPrivate(taskId, setToPrivate) {                                                            //\n      (0, _check.check)(taskId, String);                                                                        // 60\n      (0, _check.check)(setToPrivate, Boolean);                                                                 // 61\n                                                                                                                //\n      var task = Tasks.findOne(taskId);                                                                         // 63\n                                                                                                                //\n      // Make sure only the task owner can make a task private                                                  //\n      if (task.owner !== _meteor.Meteor.userId()) {                                                             // 59\n        throw new _meteor.Meteor.Error('not-authorized');                                                       // 67\n      }                                                                                                         //\n                                                                                                                //\n      Tasks.update(taskId, { $set: { 'private': setToPrivate } });                                              // 70\n    }                                                                                                           //\n                                                                                                                //\n    return tasksSetPrivate;                                                                                     //\n  }()                                                                                                           //\n});                                                                                                             //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"startup\":{\"accounts-config.js\":[\"meteor/accounts-base\",function(require){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// imports/startup/accounts-config.js                                                                           //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nvar _accountsBase = require('meteor/accounts-base');                                                            // 1\n                                                                                                                //\n_accountsBase.Accounts.ui.config({                                                                              // 3\n  passwordSignupFields: 'USERNAME_ONLY'                                                                         // 4\n});                                                                                                             //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]}},\"client\":{\"main.js\":[\"../imports/startup/accounts-config.js\",\"../imports/ui/body.js\",function(require){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// client/main.js                                                                                               //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nrequire('../imports/startup/accounts-config.js');                                                               // 1\n                                                                                                                //\nrequire('../imports/ui/body.js');                                                                               // 2\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]}},{\"extensions\":[\".js\",\".json\",\".html\",\".css\"]});\nrequire(\"./client/main.js\");","servePath":"/app.js","sourceMap":{"version":3,"sources":["imports/ui/body.html","/imports/ui/template.body.js","imports/ui/task.html","/imports/ui/template.task.js","/imports/ui/body.js","/imports/ui/task.js","/imports/api/tasks.js","/imports/startup/accounts-config.js","/client/main.js"],"names":[],"mappings":"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","file":"/app.js","sourcesContent":["module.exports = require(\"./template.body.js\");\n","\nTemplate.body.addContent((function() {\n  var view = this;\n  return HTML.DIV({\n    \"class\": \"container\"\n  }, \"\\n    \", HTML.HEADER(\"\\n      \", HTML.H1(\"Todo List (\", Blaze.View(\"lookup:incompleteCount\", function() {\n    return Spacebars.mustache(view.lookup(\"incompleteCount\"));\n  }), \")\"), \"\\n      \\n      \", HTML.Raw('<label class=\"hide-completed\">\\n        <input type=\"checkbox\">\\n        Hide Completed Tasks\\n      </label>'), \"\\n      \\n      \", Spacebars.include(view.lookupTemplate(\"loginButtons\")), \"\\n      \\n      \", Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"currentUser\"));\n  }, function() {\n    return [ \"\\n        \", HTML.FORM({\n      \"class\": \"new-task\"\n    }, \"\\n          \", HTML.INPUT({\n      type: \"text\",\n      name: \"text\",\n      placeholder: \"Type to add new tasks\"\n    }), \"\\n        \"), \"\\n      \" ];\n  }), \"\\n    \"), \"\\n \\n    \", HTML.UL(\"\\n      \", Blaze.Each(function() {\n    return Spacebars.call(view.lookup(\"tasks\"));\n  }, function() {\n    return [ \"\\n        \", Spacebars.include(view.lookupTemplate(\"task\")), \"\\n      \" ];\n  }), \"\\n    \"), \"\\n  \");\n}));\nMeteor.startup(Template.body.renderToDocument);\n","module.exports = require(\"./template.task.js\");\n","\nTemplate.__checkName(\"task\");\nTemplate[\"task\"] = new Template(\"Template.task\", (function() {\n  var view = this;\n  return HTML.LI({\n    \"class\": function() {\n      return [ Blaze.If(function() {\n        return Spacebars.call(view.lookup(\"checked\"));\n      }, function() {\n        return \"checked\";\n      }), \" \", Blaze.If(function() {\n        return Spacebars.call(view.lookup(\"private\"));\n      }, function() {\n        return \"private\";\n      }) ];\n    }\n  }, HTML.Raw('\\n    <button class=\"delete\">&times;</button>\\n \\n    '), HTML.INPUT({\n    type: \"checkbox\",\n    checked: function() {\n      return Spacebars.mustache(view.lookup(\"checked\"));\n    },\n    \"class\": \"toggle-checked\"\n  }), \"\\n    \\n    \", Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"isOwner\"));\n  }, function() {\n    return [ \"\\n      \", HTML.BUTTON({\n      \"class\": \"toggle-private\"\n    }, \"\\n        \", Blaze.If(function() {\n      return Spacebars.call(view.lookup(\"private\"));\n    }, function() {\n      return \"\\n          Private\\n        \";\n    }, function() {\n      return \"\\n          Public\\n        \";\n    }), \"\\n      \"), \"\\n    \" ];\n  }), \"\\n \\n    \", HTML.SPAN({\n    \"class\": \"text\"\n  }, HTML.STRONG(Blaze.View(\"lookup:username\", function() {\n    return Spacebars.mustache(view.lookup(\"username\"));\n  })), \" - \", Blaze.View(\"lookup:text\", function() {\n    return Spacebars.mustache(view.lookup(\"text\"));\n  })), \"\\n  \");\n}));\n","import { Meteor } from 'meteor/meteor';\r\nimport { Template } from 'meteor/templating';\r\nimport { ReactiveDict } from 'meteor/reactive-dict';\r\n\r\nimport { Tasks } from '../api/tasks.js';\r\n\r\nimport './task.js';\r\nimport './body.html';\r\n\r\nTemplate.body.onCreated(function bodyOnCreated() {\r\n  this.state = new ReactiveDict();\r\n  Meteor.subscribe('tasks');\r\n});\r\n \r\nTemplate.body.helpers({\r\n  tasks() {\r\n    const instance = Template.instance();\r\n    if (instance.state.get('hideCompleted')) {\r\n      // If hide completed is checked, filter tasks\r\n      return Tasks.find({ checked: { $ne: true } }, { sort: { createdAt: -1 } });\r\n    }\r\n    // Otherwise, return all of the tasks\r\n    return Tasks.find({}, { sort: { createdAt: -1 } });\r\n  },\r\n  incompleteCount() {\r\n    return Tasks.find({ checked: { $ne: true } }).count();\r\n  }\r\n});\r\n \r\nTemplate.body.events({\r\n  'submit .new-task'(event) {\r\n    // Prevent default browser form submit\r\n    event.preventDefault();\r\n \r\n    // Get value from form element\r\n    const target = event.target;\r\n    const text = target.text.value;\r\n     \r\n    // Insert a task into the collection\r\n    Meteor.call('tasks.insert', text);\r\n \r\n    // Clear form\r\n    target.text.value = '';\r\n  },\r\n  'change .hide-completed input'(event, instance) {\r\n    instance.state.set('hideCompleted', event.target.checked);\r\n  },\r\n});","import { Meteor } from 'meteor/meteor';\r\nimport { Template } from 'meteor/templating';\r\n  \r\nimport './task.html';\r\n\r\nTemplate.task.helpers({\r\n  isOwner() {\r\n    return this.owner === Meteor.userId();\r\n  },\r\n});\r\n \r\nTemplate.task.events({\r\n  'click .toggle-checked'() {\r\n    // Set the checked property to the opposite of its current value\r\n    Meteor.call('tasks.setChecked', this._id, !this.checked);\r\n  },\r\n  'click .delete'() {\r\n    Meteor.call('tasks.remove', this._id);\r\n  },\r\n  'click .toggle-private'() {\r\n    Meteor.call('tasks.setPrivate', this._id, !this.private);\r\n  },\r\n});","import { Meteor } from 'meteor/meteor';\r\nimport { Mongo } from 'meteor/mongo';\r\nimport { check } from 'meteor/check';\r\n \r\nexport const Tasks = new Mongo.Collection('tasks');\r\n\r\nif (Meteor.isServer) {\r\n  // This code only runs on the server\r\n  // Only publish tasks that are public or belong to the current user\r\n  Meteor.publish('tasks', function tasksPublication() {\r\n    return Tasks.find({\r\n      $or: [\r\n        { private: { $ne: true } },\r\n        { owner: this.userId },\r\n      ],\r\n    });\r\n  });\r\n}\r\n \r\nMeteor.methods({\r\n  'tasks.insert'(text) {\r\n    check(text, String);\r\n \r\n    // Make sure the user is logged in before inserting a task\r\n    if (! Meteor.userId()) {\r\n      throw new Meteor.Error('not-authorized');\r\n    }\r\n \r\n    Tasks.insert({\r\n      text,\r\n      createdAt: new Date(),\r\n      owner: Meteor.userId(),\r\n      username: Meteor.user().username,\r\n    });\r\n  },\r\n  'tasks.remove'(taskId) {\r\n    check(taskId, String);\r\n    \r\n    const task = Tasks.findOne(taskId);\r\n    if (task.private && task.owner !== Meteor.userId()) {\r\n      // If the task is private, make sure only the owner can delete it\r\n      throw new Meteor.Error('not-authorized');\r\n    }\r\n \r\n    Tasks.remove(taskId);\r\n  },\r\n  'tasks.setChecked'(taskId, setChecked) {\r\n    check(taskId, String);\r\n    check(setChecked, Boolean);\r\n    \r\n    const task = Tasks.findOne(taskId);\r\n    if (task.private && task.owner !== Meteor.userId()) {\r\n      // If the task is private, make sure only the owner can check it off\r\n      throw new Meteor.Error('not-authorized');\r\n    }\r\n \r\n    Tasks.update(taskId, { $set: { checked: setChecked } });\r\n  },\r\n  'tasks.setPrivate'(taskId, setToPrivate) {\r\n    check(taskId, String);\r\n    check(setToPrivate, Boolean);\r\n \r\n    const task = Tasks.findOne(taskId);\r\n \r\n    // Make sure only the task owner can make a task private\r\n    if (task.owner !== Meteor.userId()) {\r\n      throw new Meteor.Error('not-authorized');\r\n    }\r\n \r\n    Tasks.update(taskId, { $set: { private: setToPrivate } });\r\n  },\r\n});","import { Accounts } from 'meteor/accounts-base';\r\n \r\nAccounts.ui.config({\r\n  passwordSignupFields: 'USERNAME_ONLY',\r\n});","import '../imports/startup/accounts-config.js';\nimport '../imports/ui/body.js'"]}}]