{"version":3,"sources":["meteor://ðŸ’»app/imports/api/tasks.js","meteor://ðŸ’»app/server/main.js"],"names":[],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;AAEO,IAAM,wBAAQ,IAAI,aAAM,UAAN,CAAiB,OAArB,CAAR;;AAEb,IAAI,eAAO,QAAP,EAAiB;;;AAGnB,iBAAO,OAAP,CAAe,OAAf;AAAwB,aAAS,gBAAT,GAA4B;AAClD,aAAO,MAAM,IAAN,CAAW;AAChB,aAAK,CACH,EAAE,WAAS,EAAE,KAAK,IAAL,EAAX,EADC,EAEH,EAAE,OAAO,KAAK,MAAL,EAFN,CAAL;OADK,CAAP,CADkD;KAA5B;;WAAS;KAAjC,EAHmB;CAArB;;AAaA,eAAO,OAAP,CAAe;AACb;yBAAe,MAAM;AACnB,wBAAM,IAAN,EAAY,MAAZ;;;AADmB,UAIf,CAAE,eAAO,MAAP,EAAF,EAAmB;AACrB,cAAM,IAAI,eAAO,KAAP,CAAa,gBAAjB,CAAN,CADqB;OAAvB;;AAIA,YAAM,MAAN,CAAa;AACX,kBADW;AAEX,mBAAW,IAAI,IAAJ,EAAX;AACA,eAAO,eAAO,MAAP,EAAP;AACA,kBAAU,eAAO,IAAP,GAAc,QAAd;OAJZ,EARmB;;;;KADR;AAgBb;yBAAe,QAAQ;AACrB,wBAAM,MAAN,EAAc,MAAd,EADqB;;AAGrB,UAAM,OAAO,MAAM,OAAN,CAAc,MAAd,CAAP,CAHe;AAIrB,UAAI,mBAAgB,KAAK,KAAL,KAAe,eAAO,MAAP,EAAf,EAAgC;;AAElD,cAAM,IAAI,eAAO,KAAP,CAAa,gBAAjB,CAAN,CAFkD;OAApD;;AAKA,YAAM,MAAN,CAAa,MAAb,EATqB;;;;KAhBV;AA2Bb;6BAAmB,QAAQ,YAAY;AACrC,wBAAM,MAAN,EAAc,MAAd,EADqC;AAErC,wBAAM,UAAN,EAAkB,OAAlB,EAFqC;;AAIrC,UAAM,OAAO,MAAM,OAAN,CAAc,MAAd,CAAP,CAJ+B;AAKrC,UAAI,mBAAgB,KAAK,KAAL,KAAe,eAAO,MAAP,EAAf,EAAgC;;AAElD,cAAM,IAAI,eAAO,KAAP,CAAa,gBAAjB,CAAN,CAFkD;OAApD;;AAKA,YAAM,MAAN,CAAa,MAAb,EAAqB,EAAE,MAAM,EAAE,SAAS,UAAT,EAAR,EAAvB,EAVqC;;;;KA3B1B;AAuCb;6BAAmB,QAAQ,cAAc;AACvC,wBAAM,MAAN,EAAc,MAAd,EADuC;AAEvC,wBAAM,YAAN,EAAoB,OAApB,EAFuC;;AAIvC,UAAM,OAAO,MAAM,OAAN,CAAc,MAAd,CAAP;;;AAJiC,UAOnC,KAAK,KAAL,KAAe,eAAO,MAAP,EAAf,EAAgC;AAClC,cAAM,IAAI,eAAO,KAAP,CAAa,gBAAjB,CAAN,CADkC;OAApC;;AAIA,YAAM,MAAN,CAAa,MAAb,EAAqB,EAAE,MAAM,EAAE,WAAS,YAAT,EAAR,EAAvB,EAXuC;;;;KAvC5B;CAAf,8E;;;;;;;;;;;ACnBA,iF","file":"/app.js","sourcesContent":["import { Meteor } from 'meteor/meteor';\r\nimport { Mongo } from 'meteor/mongo';\r\nimport { check } from 'meteor/check';\r\n \r\nexport const Tasks = new Mongo.Collection('tasks');\r\n\r\nif (Meteor.isServer) {\r\n  // This code only runs on the server\r\n  // Only publish tasks that are public or belong to the current user\r\n  Meteor.publish('tasks', function tasksPublication() {\r\n    return Tasks.find({\r\n      $or: [\r\n        { private: { $ne: true } },\r\n        { owner: this.userId },\r\n      ],\r\n    });\r\n  });\r\n}\r\n \r\nMeteor.methods({\r\n  'tasks.insert'(text) {\r\n    check(text, String);\r\n \r\n    // Make sure the user is logged in before inserting a task\r\n    if (! Meteor.userId()) {\r\n      throw new Meteor.Error('not-authorized');\r\n    }\r\n \r\n    Tasks.insert({\r\n      text,\r\n      createdAt: new Date(),\r\n      owner: Meteor.userId(),\r\n      username: Meteor.user().username,\r\n    });\r\n  },\r\n  'tasks.remove'(taskId) {\r\n    check(taskId, String);\r\n    \r\n    const task = Tasks.findOne(taskId);\r\n    if (task.private && task.owner !== Meteor.userId()) {\r\n      // If the task is private, make sure only the owner can delete it\r\n      throw new Meteor.Error('not-authorized');\r\n    }\r\n \r\n    Tasks.remove(taskId);\r\n  },\r\n  'tasks.setChecked'(taskId, setChecked) {\r\n    check(taskId, String);\r\n    check(setChecked, Boolean);\r\n    \r\n    const task = Tasks.findOne(taskId);\r\n    if (task.private && task.owner !== Meteor.userId()) {\r\n      // If the task is private, make sure only the owner can check it off\r\n      throw new Meteor.Error('not-authorized');\r\n    }\r\n \r\n    Tasks.update(taskId, { $set: { checked: setChecked } });\r\n  },\r\n  'tasks.setPrivate'(taskId, setToPrivate) {\r\n    check(taskId, String);\r\n    check(setToPrivate, Boolean);\r\n \r\n    const task = Tasks.findOne(taskId);\r\n \r\n    // Make sure only the task owner can make a task private\r\n    if (task.owner !== Meteor.userId()) {\r\n      throw new Meteor.Error('not-authorized');\r\n    }\r\n \r\n    Tasks.update(taskId, { $set: { private: setToPrivate } });\r\n  },\r\n});","import '../imports/api/tasks.js';"]}