{"version":3,"sources":["meteor://ðŸ’»app/imports/ui/body.html","meteor://ðŸ’»app/imports/ui/template.body.js","meteor://ðŸ’»app/imports/ui/task.html","meteor://ðŸ’»app/imports/ui/template.task.js","meteor://ðŸ’»app/imports/ui/body.js","meteor://ðŸ’»app/imports/ui/task.js","meteor://ðŸ’»app/imports/api/tasks.js","meteor://ðŸ’»app/imports/startup/accounts-config.js","meteor://ðŸ’»app/client/main.js"],"names":[],"mappings":"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","file":"/app.js","sourcesContent":["module.exports = require(\"./template.body.js\");\n","\nTemplate.body.addContent((function() {\n  var view = this;\n  return HTML.DIV({\n    \"class\": \"container\"\n  }, \"\\n    \", HTML.HEADER(\"\\n      \", HTML.H1(\"Todo List (\", Blaze.View(\"lookup:incompleteCount\", function() {\n    return Spacebars.mustache(view.lookup(\"incompleteCount\"));\n  }), \")\"), \"\\n      \\n      \", HTML.Raw('<label class=\"hide-completed\">\\n        <input type=\"checkbox\">\\n        Hide Completed Tasks\\n      </label>'), \"\\n      \\n      \", Spacebars.include(view.lookupTemplate(\"loginButtons\")), \"\\n      \\n      \", Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"currentUser\"));\n  }, function() {\n    return [ \"\\n        \", HTML.FORM({\n      \"class\": \"new-task\"\n    }, \"\\n          \", HTML.INPUT({\n      type: \"text\",\n      name: \"text\",\n      placeholder: \"Type to add new tasks\"\n    }), \"\\n        \"), \"\\n      \" ];\n  }), \"\\n    \"), \"\\n \\n    \", HTML.UL(\"\\n      \", Blaze.Each(function() {\n    return Spacebars.call(view.lookup(\"tasks\"));\n  }, function() {\n    return [ \"\\n        \", Spacebars.include(view.lookupTemplate(\"task\")), \"\\n      \" ];\n  }), \"\\n    \"), \"\\n  \");\n}));\nMeteor.startup(Template.body.renderToDocument);\n","module.exports = require(\"./template.task.js\");\n","\nTemplate.__checkName(\"task\");\nTemplate[\"task\"] = new Template(\"Template.task\", (function() {\n  var view = this;\n  return HTML.LI({\n    \"class\": function() {\n      return [ Blaze.If(function() {\n        return Spacebars.call(view.lookup(\"checked\"));\n      }, function() {\n        return \"checked\";\n      }), \" \", Blaze.If(function() {\n        return Spacebars.call(view.lookup(\"private\"));\n      }, function() {\n        return \"private\";\n      }) ];\n    }\n  }, HTML.Raw('\\n    <button class=\"delete\">&times;</button>\\n \\n    '), HTML.INPUT({\n    type: \"checkbox\",\n    checked: function() {\n      return Spacebars.mustache(view.lookup(\"checked\"));\n    },\n    \"class\": \"toggle-checked\"\n  }), \"\\n    \\n    \", Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"isOwner\"));\n  }, function() {\n    return [ \"\\n      \", HTML.BUTTON({\n      \"class\": \"toggle-private\"\n    }, \"\\n        \", Blaze.If(function() {\n      return Spacebars.call(view.lookup(\"private\"));\n    }, function() {\n      return \"\\n          Private\\n        \";\n    }, function() {\n      return \"\\n          Public\\n        \";\n    }), \"\\n      \"), \"\\n    \" ];\n  }), \"\\n \\n    \", HTML.SPAN({\n    \"class\": \"text\"\n  }, HTML.STRONG(Blaze.View(\"lookup:username\", function() {\n    return Spacebars.mustache(view.lookup(\"username\"));\n  })), \" - \", Blaze.View(\"lookup:text\", function() {\n    return Spacebars.mustache(view.lookup(\"text\"));\n  })), \"\\n  \");\n}));\n","import { Meteor } from 'meteor/meteor';\r\nimport { Template } from 'meteor/templating';\r\nimport { ReactiveDict } from 'meteor/reactive-dict';\r\n\r\nimport { Tasks } from '../api/tasks.js';\r\n\r\nimport './task.js';\r\nimport './body.html';\r\n\r\nTemplate.body.onCreated(function bodyOnCreated() {\r\n  this.state = new ReactiveDict();\r\n  Meteor.subscribe('tasks');\r\n});\r\n \r\nTemplate.body.helpers({\r\n  tasks() {\r\n    const instance = Template.instance();\r\n    if (instance.state.get('hideCompleted')) {\r\n      // If hide completed is checked, filter tasks\r\n      return Tasks.find({ checked: { $ne: true } }, { sort: { createdAt: -1 } });\r\n    }\r\n    // Otherwise, return all of the tasks\r\n    return Tasks.find({}, { sort: { createdAt: -1 } });\r\n  },\r\n  incompleteCount() {\r\n    return Tasks.find({ checked: { $ne: true } }).count();\r\n  }\r\n});\r\n \r\nTemplate.body.events({\r\n  'submit .new-task'(event) {\r\n    // Prevent default browser form submit\r\n    event.preventDefault();\r\n \r\n    // Get value from form element\r\n    const target = event.target;\r\n    const text = target.text.value;\r\n     \r\n    // Insert a task into the collection\r\n    Meteor.call('tasks.insert', text);\r\n \r\n    // Clear form\r\n    target.text.value = '';\r\n  },\r\n  'change .hide-completed input'(event, instance) {\r\n    instance.state.set('hideCompleted', event.target.checked);\r\n  },\r\n});","import { Meteor } from 'meteor/meteor';\r\nimport { Template } from 'meteor/templating';\r\n  \r\nimport './task.html';\r\n\r\nTemplate.task.helpers({\r\n  isOwner() {\r\n    return this.owner === Meteor.userId();\r\n  },\r\n});\r\n \r\nTemplate.task.events({\r\n  'click .toggle-checked'() {\r\n    // Set the checked property to the opposite of its current value\r\n    Meteor.call('tasks.setChecked', this._id, !this.checked);\r\n  },\r\n  'click .delete'() {\r\n    Meteor.call('tasks.remove', this._id);\r\n  },\r\n  'click .toggle-private'() {\r\n    Meteor.call('tasks.setPrivate', this._id, !this.private);\r\n  },\r\n});","import { Meteor } from 'meteor/meteor';\r\nimport { Mongo } from 'meteor/mongo';\r\nimport { check } from 'meteor/check';\r\n \r\nexport const Tasks = new Mongo.Collection('tasks');\r\n\r\nif (Meteor.isServer) {\r\n  // This code only runs on the server\r\n  // Only publish tasks that are public or belong to the current user\r\n  Meteor.publish('tasks', function tasksPublication() {\r\n    return Tasks.find({\r\n      $or: [\r\n        { private: { $ne: true } },\r\n        { owner: this.userId },\r\n      ],\r\n    });\r\n  });\r\n}\r\n \r\nMeteor.methods({\r\n  'tasks.insert'(text) {\r\n    check(text, String);\r\n \r\n    // Make sure the user is logged in before inserting a task\r\n    if (! Meteor.userId()) {\r\n      throw new Meteor.Error('not-authorized');\r\n    }\r\n \r\n    Tasks.insert({\r\n      text,\r\n      createdAt: new Date(),\r\n      owner: Meteor.userId(),\r\n      username: Meteor.user().username,\r\n    });\r\n  },\r\n  'tasks.remove'(taskId) {\r\n    check(taskId, String);\r\n    \r\n    const task = Tasks.findOne(taskId);\r\n    if (task.private && task.owner !== Meteor.userId()) {\r\n      // If the task is private, make sure only the owner can delete it\r\n      throw new Meteor.Error('not-authorized');\r\n    }\r\n \r\n    Tasks.remove(taskId);\r\n  },\r\n  'tasks.setChecked'(taskId, setChecked) {\r\n    check(taskId, String);\r\n    check(setChecked, Boolean);\r\n    \r\n    const task = Tasks.findOne(taskId);\r\n    if (task.private && task.owner !== Meteor.userId()) {\r\n      // If the task is private, make sure only the owner can check it off\r\n      throw new Meteor.Error('not-authorized');\r\n    }\r\n \r\n    Tasks.update(taskId, { $set: { checked: setChecked } });\r\n  },\r\n  'tasks.setPrivate'(taskId, setToPrivate) {\r\n    check(taskId, String);\r\n    check(setToPrivate, Boolean);\r\n \r\n    const task = Tasks.findOne(taskId);\r\n \r\n    // Make sure only the task owner can make a task private\r\n    if (task.owner !== Meteor.userId()) {\r\n      throw new Meteor.Error('not-authorized');\r\n    }\r\n \r\n    Tasks.update(taskId, { $set: { private: setToPrivate } });\r\n  },\r\n});","import { Accounts } from 'meteor/accounts-base';\r\n \r\nAccounts.ui.config({\r\n  passwordSignupFields: 'USERNAME_ONLY',\r\n});","import '../imports/startup/accounts-config.js';\nimport '../imports/ui/body.js'"]}